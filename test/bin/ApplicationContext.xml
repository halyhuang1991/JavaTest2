<?xml version="1.0" encoding="UTF-8" ?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/context 
       http://www.springframework.org/schema/context/spring-context-3.0.xsd
       http://www.springframework.org/schema/aop
       http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
       http://www.springframework.org/schema/beans 
       http://www.springframework.org/schema/beans/spring-beans-3.0.xsd">
        <context:annotation-config />
      <bean id="userService" class="com.test.spring.SpringHelloWorld"></bean>
       <bean id="Calculator" class="com.test.spring.Aop.CalculatorImpl"></bean>
        <!-- 配置切面的 bean. -->
       <bean id="loggingAspect"
             class="com.test.spring.Aop.LoggingAspect"></bean>
       <!-- <bean id="vlidationAspect"
             class="com.spring2.lee.aop.impl.VlidationAspect"></bean> -->
       <!-- 配置 AOP -->
       <aop:config>
              <!-- 配置切点表达式 -->
              <aop:pointcut id="pointcut" expression="execution(* com.test.spring.Aop.Calculator.*(int, int))"/>
              <!-- 配置切面及通知 -->
              <aop:aspect ref="loggingAspect" order="2">
                     <aop:before method="beforeMethod" pointcut-ref="pointcut"/>
                     <aop:after method="afterMethod" pointcut-ref="pointcut"/>
                     <aop:after-throwing method="afterThrowing" pointcut-ref="pointcut" throwing="e"/>
                     <aop:after-returning method="afterReturning" pointcut-ref="pointcut" returning="result"/>
                     <!--
                         <aop:around method="aroundMethod" pointcut-ref="pointcut"/>
                   -->
              </aop:aspect>
              <!-- <aop:aspect ref="vlidationAspect" order="1">
                     <aop:before method="validateArgs" pointcut-ref="pointcut"/>
              </aop:aspect> -->
       </aop:config>
          <!--
        自动为Spring容器中那些匹配@AspectJ切面的Bean创建代理，完成切面织入。
        proxy-target-class属性，默认是false,表示使用JDK动态代理技术织入增强。
        当设置为true时，表示使用CGLib动态代理技术织入增强。不过即使设置为false，
        如果目标类没有实现接口，则Spring将自动使用CGLib动态代理
    -->
    <aop:aspectj-autoproxy proxy-target-class="false"/>

    
</beans>
 